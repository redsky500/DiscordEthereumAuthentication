{
  "version": 3,
  "sources": ["../../lib/index.ts", "../../lib/DynamoDBStack.ts"],
  "sourcesContent": ["import * as sst from \"@serverless-stack/resources\";\r\n\r\nimport DynamoDBStack from \"./DynamoDBStack\";\r\n\r\nexport default function main(app: sst.App): void {\r\n  new DynamoDBStack(app, \"dynamodb\");\r\n}\r\n", "import { CfnOutput, StackProps } from \"@aws-cdk/core\";\r\nimport * as dynamodb from \"@aws-cdk/aws-dynamodb\";\r\nimport * as sst from \"@serverless-stack/resources\";\r\n\r\nexport default class DynamoDBStack extends sst.Stack {\r\n  constructor(scope: sst.App, id: string, props?: StackProps) {\r\n    super(scope, id, props);\r\n\r\n    const table = new dynamodb.Table(this, \"Table\", {\r\n      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST, // Use on-demand billing mode\r\n      partitionKey: { name: \"PK\", type: dynamodb.AttributeType.STRING },\r\n      sortKey: { name: \"SK\", type: dynamodb.AttributeType.STRING },\r\n    });\r\n\r\n    table.addGlobalSecondaryIndex({\r\n      indexName: 'SK_GSI',\r\n      partitionKey: { name: \"SK\", type: dynamodb.AttributeType.STRING},\r\n      projectionType: dynamodb.ProjectionType.ALL\r\n    })\r\n\r\n    table.addGlobalSecondaryIndex({\r\n      indexName: 'SK_GSI_PK',\r\n      partitionKey: { name: \"SK\", type: dynamodb.AttributeType.STRING},\r\n      sortKey: { name: \"PK\", type: dynamodb.AttributeType.STRING},\r\n      projectionType: dynamodb.ProjectionType.ALL\r\n    })\r\n\r\n    table.addGlobalSecondaryIndex({\r\n      indexName: 'TOKEN_ID',\r\n      partitionKey: { name: \"TokenId\", type: dynamodb.AttributeType.STRING},\r\n      projectionType: dynamodb.ProjectionType.ALL\r\n    })\r\n\r\n    // Output values\r\n    new CfnOutput(this, \"TableName\", {\r\n      value: table.tableName,\r\n      exportName: scope.logicalPrefixedName(\"TableName\")\r\n    });\r\n    new CfnOutput(this, \"TableArn\", {\r\n      value: table.tableArn,\r\n      exportName: scope.logicalPrefixedName(\"TableArn\")\r\n    });\r\n  }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;ACAA,kBAAsC;AACtC,eAA0B;AAC1B,UAAqB;AAErB,kCAA+C,UAAM;AAAA,EACnD,YAAY,OAAgB,IAAY,OAAoB;AAC1D,UAAM,OAAO,IAAI;AAEjB,UAAM,QAAQ,IAAa,eAAM,MAAM,SAAS;AAAA,MAC9C,aAAa,AAAS,qBAAY;AAAA,MAClC,cAAc,EAAE,MAAM,MAAM,MAAM,AAAS,uBAAc;AAAA,MACzD,SAAS,EAAE,MAAM,MAAM,MAAM,AAAS,uBAAc;AAAA;AAGtD,UAAM,wBAAwB;AAAA,MAC5B,WAAW;AAAA,MACX,cAAc,EAAE,MAAM,MAAM,MAAM,AAAS,uBAAc;AAAA,MACzD,gBAAgB,AAAS,wBAAe;AAAA;AAG1C,UAAM,wBAAwB;AAAA,MAC5B,WAAW;AAAA,MACX,cAAc,EAAE,MAAM,MAAM,MAAM,AAAS,uBAAc;AAAA,MACzD,SAAS,EAAE,MAAM,MAAM,MAAM,AAAS,uBAAc;AAAA,MACpD,gBAAgB,AAAS,wBAAe;AAAA;AAG1C,UAAM,wBAAwB;AAAA,MAC5B,WAAW;AAAA,MACX,cAAc,EAAE,MAAM,WAAW,MAAM,AAAS,uBAAc;AAAA,MAC9D,gBAAgB,AAAS,wBAAe;AAAA;AAI1C,QAAI,sBAAU,MAAM,aAAa;AAAA,MAC/B,OAAO,MAAM;AAAA,MACb,YAAY,MAAM,oBAAoB;AAAA;AAExC,QAAI,sBAAU,MAAM,YAAY;AAAA,MAC9B,OAAO,MAAM;AAAA,MACb,YAAY,MAAM,oBAAoB;AAAA;AAAA;AAAA;;;ADpC7B,cAAc,KAAoB;AAC/C,MAAI,cAAc,KAAK;AAAA;",
  "names": []
}
